// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output = "../node_modules/.prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int         @id @default(autoincrement())
  name            String?
  email           String?     @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  posts           Post[]
  votes           Vote[]
}

model Org {
  id              Int       @id @default(autoincrement())
  name            String?
  settings        Json?
}

model Category {
  id              Int        @id @default(autoincrement())
  name            String

  posts           Post[]
}

model Post {
  id              Int         @id @default(autoincrement())
  title           String
  text            Json?
  categoryId      Int
  authorId        Int
  status          PostStatus  @default(IN_REVIEW)

  category        Category    @relation(fields: [categoryId], references: [id])
  author          User        @relation(fields: [authorId], references: [id])
  votes           VotesOnPosts[]

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now())
}

enum PostStatus {
  IN_REVIEW
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Vote {
  id              Int               @id @default(autoincrement())
  authorId        Int
  author          User              @relation(fields: [authorId], references: [id])
  createdAt       DateTime          @default(now())
  posts           VotesOnPosts[]
}

model VotesOnPosts {
  postId          Int
  post            Post            @relation(fields: [postId], references: [id])
  voteId          Int
  vote            Vote            @relation(fields: [voteId], references: [id], onDelete: Cascade)

  @@id([postId, voteId])
}

model Account {
  id                  Int     @id @default(autoincrement())
  userId              Int
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String? @db.Text
  access_token        String? @db.Text
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String? @db.Text
  session_state       String?

  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id              Int       @id @default(autoincrement())
  sessionToken    String    @unique
  userId          Int
  expires         DateTime
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
